//val mod = 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

import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.mllib.classification.{SVMModel, SVMWithSGD}
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.util.MLUtils
import java.io.FileOutputStream
import java.io.ObjectOutputStream
import java.io.ByteArrayOutputStream
import java.util.Base64
import java.io.ByteArrayInputStream
import java.io.ObjectInputStream
import org.apache.spark.mllib.linalg.{Vector, Vectors}

object TestLinearRegressionMod {

  // /** Read the object from Base64 string. */
  //  private static Object fromString( String s ) throws IOException ,
  //                                                      ClassNotFoundException {
  //       byte [] data = Base64.getDecoder().decode( s );
  //       ObjectInputStream ois = new ObjectInputStream( 
  //                                       new ByteArrayInputStream(  data ) );
  //       Object o  = ois.readObject();
  //       ois.close();
  //       return o;
  //  }

  //   /** Write the object to a Base64 string. */
  //   private static String toString( Serializable o ) throws IOException {
  //       ByteArrayOutputStream baos = new ByteArrayOutputStream();
  //       ObjectOutputStream oos = new ObjectOutputStream( baos );
  //       oos.writeObject( o );
  //       oos.close();
  //       return Base64.getEncoder().encodeToString(baos.toByteArray()); 
  //   }
  def main(args: Array[String]): Unit = {
    val conf = new SparkConf().setAppName("LinearRegressionTrain").setMaster("local")
          .setSparkHome("/usr/local/spark");
    val sc = new SparkContext(conf)
	// Load training data in LIBSVM format.
	//val payload = MLUtils.loadLibSVMFile(sc, "predict_libsvm_data.txt")

	//Load csv and conver to LabeledPointData
	val csv = sc.textFile("test_sample_aml_data.csv");

	//To find the headers
	val header = csv.first;

	//To remove the header
	val _data = csv.filter(_(0) != header(0));

	//To create a RDD of (label, features) pairs
	val features = _data.map { line =>
	    val parts = line.split(',')
	    Vectors.dense(parts.map(_.toDouble))
	}.cache()
	//val features = Vectors.dense(_data.mkString("").split(',').map(_.toDouble));

	//val model = SVMWithSGD.train(training, numIterations)
	//val s = "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"
	val s = "rO0ABXNyAC5vcmcuYXBhY2hlLnNwYXJrLm1sbGliLmNsYXNzaWZpY2F0aW9uLlNWTU1vZGVswK7amIIHQPACAAFMAAl0aHJlc2hvbGR0AA5Mc2NhbGEvT3B0aW9uO3hyADhvcmcuYXBhY2hlLnNwYXJrLm1sbGliLnJlZ3Jlc3Npb24uR2VuZXJhbGl6ZWRMaW5lYXJNb2RlbGUq8oxM5D4vAgACRAAJaW50ZXJjZXB0TAAHd2VpZ2h0c3QAJkxvcmcvYXBhY2hlL3NwYXJrL21sbGliL2xpbmFsZy9WZWN0b3I7eHAAAAAAAAAAAHNyAClvcmcuYXBhY2hlLnNwYXJrLm1sbGliLmxpbmFsZy5EZW5zZVZlY3RvcmDeyXqandikAgABWwAGdmFsdWVzdAACW0R4cHVyAAJbRD6mjBSrY1oeAgAAeHAAAAA1wUkCqg/9NBy/6tU7LeSZ0AAAAAAAAAAAAAAAAAAAAAC/6tU7LeSZ0AAAAAAAAAAAAAAAAAAAAAC/6tU7LeSZ0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL/q1Tst5JnQAAAAAAAAAAAAAAAAAAAAAL/q1Tst5JnQAAAAAAAAAAAAAAAAAAAAAL/q1Tst5JnQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAv+Mql/w1km+/vqqMxrwdfAAAAAAAAAAAAAAAAAAAAAC/vqqMxrwdfL/eqozGvB18v86qjMa8HXwAAAAAAAAAAAAAAAAAAAAAv76qjMa8HXy/zqqMxrwdfL++qozGvB18v76qjMa8HXwAAAAAAAAAAL++qozGvB18AAAAAAAAAAC/zqqMxrwdfAAAAAAAAAAAAAAAAAAAAAC/vqqMxrwdfL/OqozGvB18AAAAAAAAAAC/zqqMxrwdfAAAAAAAAAAAv86qjMa8HXy/4yqX/DWSb7/jKpf8NZJvv+Mql/w1km+/4yqX/DWSb7/eqozGvB18v96qjMa8HXy/3qqMxrwdfHNyAAtzY2FsYS5Ob25lJEZQJPZTypSsAgAAeHIADHNjYWxhLk9wdGlvbv5pN/3bDmZ0AgAAeHA="
	val data = Base64.getDecoder().decode( s );
	val ois = new ObjectInputStream(new ByteArrayInputStream(  data ) );
	val model  = ois.readObject().asInstanceOf[SVMModel];
	// Compute raw scores on the test set.
	val score = model.predict(features)
	System.out.println("score")
	System.out.println(score.count())
	System.out.println(score.first())

	 sc.stop()
  }
}